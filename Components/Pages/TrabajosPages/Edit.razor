@page "/Trabajos/Edit/{TrabajoId:int}"
@rendermode InteractiveServer
@inject TrabajosService trabajosService
@inject ClientesService clientesService
@inject TecnicoService tecnicoService
@inject PrioridadesService prioridadesService
@inject NavigationManager navigation

<PageTitle>Editar Trabajo</PageTitle>
<EditForm Model="trabajo" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <!-- Header -->
            <div class="card-header bg-success text-white text-center" style="display: flex; align-items: center; justify-content: center;">
                <i class="bi bi-pencil-square" style="font-size: 2rem;"></i>
                <h4 style="margin: 0 15px;"><strong>Editar Trabajo:</strong></h4>
            </div>

            <!-- Body -->
            <div class="card-body">

                <label for="id" class="form-label"><strong>ID</strong></label>
                <InputNumber id="id" class="form-control" @bind-Value="trabajo.TrabajoId" readonly></InputNumber>

                <label for="fecha" class="form-label"><strong>Fecha</strong></label>
                <InputDate id="fecha" class="form-control" @bind-Value="trabajo.Fecha"></InputDate>

                <label for="cliente" class="form-label"><strong>Cliente</strong></label>
                <InputSelect id="cliente" class="form-control" @bind-Value="trabajo.ClienteId">
                    @foreach (var cliente in clientes)
                    {
                        <option value="@cliente.ClienteId">@cliente.Nombres</option>
                    }
                </InputSelect>

                <label for="tecnico" class="form-label"><strong>T&eacute;cnico</strong></label>
                <InputSelect id="tecnico" class="form-control" @bind-Value="trabajo.TecnicoId">
                    @foreach (var tecnico in tecnicos)
                    {
                        <option value="@tecnico.TecnicoId">@tecnico.NombresTecnico</option>
                    }
                </InputSelect>

                <label for="descripcion" class="form-label"><strong>Descripci&oacute;n</strong></label>
                <InputTextArea id="descripcion" class="form-control" @bind-Value="trabajo.Descripcion"></InputTextArea>
                <ValidationMessage For="@(() => trabajo.Descripcion)" />

                <label for="prioridades" class="form-label"><strong>Prioridades</strong></label>
                <InputSelect id="prioridades" class="form-control" @bind-Value="trabajo.PrioridadId">
                    @foreach (var prioridad in prioridades)
                    {
                        <option value="@prioridad.PrioridadId">@prioridad.Descripcion</option>
                    }
                </InputSelect>

                <label for="monto" class="form-label"><strong>Monto</strong></label>
                <InputNumber id="monto" class="form-control" @bind-Value="trabajo.Monto"></InputNumber>
                <ValidationMessage For="@(() => trabajo.Monto)" />
            </div>

            <!-- Footer -->
            <div class="card-footer">
                @if (!string.IsNullOrEmpty(Mensaje))
                {
                    <div class="alert alert-danger" role="alert">
                        @Mensaje
                    </div>
                }
                <a href="/Trabajos/Index" class="btn btn-secondary text-white bi bi-arrow-90deg-left"> Volver</a>
                <button type="submit" class="btn btn-secondary bi bi-pencil-square"> Modificar</button>
                <button type="button" class="btn btn-success bi bi-whatsapp" @onclick="EnviarMensajeWhatsapp"> Mensaje</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TrabajoId { get; set; }
    public Trabajos trabajo { get; set; } = new Trabajos();
    public List<Clientes> clientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> tecnicos { get; set; } = new List<Tecnicos>();
    public List<Prioridades> prioridades { get; set; } = new List<Prioridades>();
    public string? Mensaje { get; set; }
    public Clientes? clienteSeleccionado { get; set; } = new Clientes();
    public Tecnicos? tecnicoSeleccionado { get; set; } = new Tecnicos();
    public Prioridades? prioridadesSeleccionado { get; set; } = new Prioridades();

    protected override async Task OnInitializedAsync()
    {
        tecnicos = await tecnicoService.Listar(w => w.Id > 0);
        clientes = await clientesService.Listar(w => w.ClienteId > 0);
        prioridades = await prioridadesService.Listar(w => w.PrioridadId > 0);

        if (TrabajoId > 0)
        {
            trabajo = await trabajosService.Buscar(TrabajoId);

            if (trabajo.ClienteId > 0)
            {
                clienteSeleccionado = await clientesService.Buscar(trabajo.ClienteId);
            }

            if (trabajo.TecnicoId > 0)
            {
                tecnicoSeleccionado = await tecnicoService.Buscar(trabajo.TecnicoId);
            }

            if (trabajo.PrioridadId > 0)
            {
                prioridadesSeleccionado = await prioridadesService.Buscar(trabajo.PrioridadId);
            }
        }
    }

    public async Task<bool> Validar()
    {
        var existeTrabajo = await trabajosService.ExisteDescripcion(trabajo.Descripcion);
        return existeTrabajo;
    }

    public async Task Modificar()
    {
        var resultado = await trabajosService.Guardar(trabajo);

        if (resultado)
        {
            navigation.NavigateTo("/Trabajos/Index");
        }
        else
        {
            Mensaje = "Ocurrió un error al guardar el trabajo. Por favor, intenta nuevamente.";
        }
    }

    public async Task EnviarMensajeWhatsapp()
    {
        if (clienteSeleccionado == null || string.IsNullOrEmpty(clienteSeleccionado.WhatsApp))
        {
            Mensaje = "No se puede enviar el mensaje. El cliente seleccionado no tiene un número de WhatsApp válido.";
            return;
        }

        if (tecnicoSeleccionado == null)
        {
            Mensaje = "No se puede enviar el mensaje. El técnico asignado no está disponible.";
            return;
        }

        string mensaje = $"Hola, este es un mensaje automático para informarle que su trabajo ha sido aceptado con los siguientes datos:\n\n" +
                         $"Descripción del Trabajo: {trabajo.Descripcion}\n" +
                         $"Técnico Asignado: {tecnicoSeleccionado.NombresTecnico}";

        string numeroTelefono = clienteSeleccionado.WhatsApp;

        string urlWhatsapp = $"https://wa.me/{numeroTelefono}?text={Uri.EscapeDataString(mensaje)}";
        navigation.NavigateTo(urlWhatsapp, forceLoad: true);
    }
}
