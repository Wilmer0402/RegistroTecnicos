@page "/Tecnicos/Create"

@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject NavigationManager navigation
@inject IJSRuntime js

<PageTitle>Crear Nuevo Técnico</PageTitle>

<style>
    /* Aplica Times New Roman a todos los textos de la página */
    body {
        font-family: 'Times New Roman', Times, serif;
    }

    .card-header h1 {
        font-family: 'Times New Roman', Times, serif; /* Cambia la fuente del encabezado */
    }
</style>

<EditForm Model="tecnico" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <div class="container"></div>
    <div class="card shadow-lg">
        <div class="card-header bg-success text-white text-center" style="display: flex; align-items: center; justify-content: center;">
            <i class="bi bi-person-fill-add" style="font-size: 2rem;"></i>
            <h4 style="margin: 0 15px;"><strong>Crear Nuevo Técnico:</strong></h4>
        </div>
        <div class="card-body">
            <label for="id" class="form-label"><strong>ID</strong></label>
            <InputNumber id="id" class="form-control" @bind-Value="tecnico.tecnicoId" @onchange="ValidarId"></InputNumber>
            <ValidationMessage For="@(() => tecnico.tecnicoId)"></ValidationMessage>

            <label for="nombre" class="form-label"><strong>Nombre Técnico</strong></label>
            <InputText id="nombre" class="form-control" @bind-Value="tecnico.nombreTecnico" @onchange="ValidarNombre"></InputText>
            <ValidationMessage For="@(() => tecnico.nombreTecnico)"></ValidationMessage>

            <label for="sueldoHora" class="form-label"><strong>Sueldo por Hora</strong></label>
            <InputText id="sueldoHora" class="form-control" @bind-Value="formattedSueldoHora" @oninput="OnSueldoHoraChanged"></InputText>
            <ValidationMessage For="@(() => tecnico.sueldoHora)"></ValidationMessage>

            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <div class="alert alert-danger" role="alert">
                    @mensajeError
                </div>
            }
        </div>
        <div class="card-footer">
            <button type="button" class="btn btn-secondary text-white bi bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
            <button type="submit" class="btn btn-success bi bi-floppy-fill">Guardar</button>
        </div>
    </div>
</EditForm>

@code {
    public Tecnicos tecnico { get; set; } = new Tecnicos();
    private string mensajeError { get; set; } = string.Empty;

    private string formattedSueldoHora
    {
        get => tecnico.sueldoHora.ToString("N2"); // Formatea el sueldo por hora como 23,568.00
        set
        {
            var cleanValue = value.Replace(",", ""); // Remueve las comas para parsear
            if (float.TryParse(cleanValue, out var result))
            {
                tecnico.sueldoHora = result;
            }
        }
    }

    public async Task Crear()
    {
        mensajeError = string.Empty; // Limpia el mensaje de error antes de intentar crear

        if (!await tecnicoService.Existe(tecnico.tecnicoId))
        {
            if (!await tecnicoService.ExistePorNombre(tecnico.nombreTecnico))
            {
                await tecnicoService.Insertar(tecnico);
                tecnico = new Tecnicos();
                navigation.NavigateTo("/Tecnicos/Index");
            }
            else
            {
                mensajeError = "El nombre del técnico ya existe. Por favor, elija otro nombre.";
            }
        }
        else
        {
            mensajeError = "Error el ID ya existe. Por favor, elija otro ID.";
        }
    }

    public async Task ValidarId(ChangeEventArgs e)
    {
        var id = int.Parse(e.Value.ToString());
        if (await tecnicoService.Existe(id))
        {
            await js.InvokeVoidAsync("alert", "Error el ID ya Existe. Por favor, elija otro ID.");
        }
    }

    public async Task ValidarNombre(ChangeEventArgs e)
    {
        var nombre = e.Value.ToString();
        if (await tecnicoService.ExistePorNombre(nombre))
        {
            await js.InvokeVoidAsync("alert", "El nombre del técnico ya existe. Por favor, elija otro nombre.");
        }
    }

    public void Volver()
    {
        navigation.NavigateTo("/Tecnicos/Index");
    }

    private void OnSueldoHoraChanged(ChangeEventArgs e)
    {
        formattedSueldoHora = e.Value.ToString();
    }
}

